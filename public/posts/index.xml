<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Jerry Loh</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Jerry Loh</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatic crossword generation using LLM Agents</title>
      <link>http://localhost:1313/posts/crossword/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/crossword/</guid>
      <description>In this post, I will detail how I created a NLP-based automatic crossword puzzle generator, which takes in any topic as user input, and generates answer-clue pairs relating to that topic along with a crossword board automatically. This is based on the AgentCoder approach.
Demo My source code can be found here.
User inputs topic: &amp;lsquo;sports&amp;rsquo; python main.py sports Crossword is generated, with board, answers, and clues: User Input Topic: SPORTS 8 out of 14 words generated used F - G A M E - - - - O - - T - - - - - - O - - H O C K E Y - T - - L - O - - - - B A S E B A L L - - A - - T - C - - - - L - - I - H O S T - L - - C - - - - V - - - - - - - - - - - - - - - - - - - - - ACROSS: (1, 3) - A contest of risks (4) (3, 4) - Sport with sticks and pucks (6) (5, 1) - America&amp;#39;s pastime, batting around (8) (7, 6) - One who greets at the door (4) DOWN: (1, 1) - Sport involving goals with kicks (8) (1, 4) - Fit for sports, sounds like a competition (8) (3, 6) - Mentor of teams (5) (7, 9) - Small screen box (2) Motivation While working at Julius Baer, we worked on replicating the results and implementing the framework in AgentCoder, which is the current state-of-the-art on HumanEval and MBPP.</description>
    </item>
    <item>
      <title>Reverse-mode autodiff from scratch</title>
      <link>http://localhost:1313/posts/autodiff/</link>
      <pubDate>Fri, 07 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/autodiff/</guid>
      <description>We implement a simple automatic differentiation tool in Python which can compute the gradient of any (simple) multivariable function efficiently.
Use case Understanding how autodiff works is crucial for understanding backpropagation and how optimisation works in a deep learning setting: In general, we want an easy way to compute gradients of a loss function wrt to its weights and bias parameters so that we can apply algorithms such as gradient descent.</description>
    </item>
  </channel>
</rss>
